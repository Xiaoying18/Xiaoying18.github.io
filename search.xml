<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二叉树中两个节点的最近公共祖先节点</title>
    <url>/2020/08/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="二叉树中两个节点的最近公共祖先节点"><a href="#二叉树中两个节点的最近公共祖先节点" class="headerlink" title="二叉树中两个节点的最近公共祖先节点"></a>二叉树中两个节点的最近公共祖先节点</h1><p>今天看到一个特别有趣的题，找二叉树中两个节点的最近公共祖先节点。一个题可以出成不同的题型，根据的是这个二叉树是怎么样一个二叉树。在这里总结一下：</p>
<p><em>注：以下所有代码都是java代码，且由于我的懒惰没有测试过，要是有什么乱起八糟的bug欢迎大家告诉我</em></p>
<p><em><a href="mailto:zhaixiaoying18@163.com">zhaixiaoying18@163.com</a>  thanks~</em></p>
<p>为了方便表述，我们设这棵树的根节点叫【root】，两个节点分别是【节点a】和【节点b】。</p>
<p><strong>不管是什么样的二叉树，万变不离其宗的是，</strong></p>
<p>① 两个节点与他们公共祖先节点的位置关系，一定是以下三种中的一种：</p>
<p>a -&gt; … -&gt; b        //b在a的子树上，此时，公共祖先节点就是 a</p>
<p>b -&gt; … -&gt; a        //a在b的子树上，此时，公共祖先节点就是b</p>
<p>a &lt;-  … &lt;-  targetNode - &gt; …  -&gt; b        //a和b在公共祖先节点的一左一右</p>
<p>②啥顺序找：一棵树嘛，找东西要不就是从上往下找，要不就是从下往上找</p>
<p>​        <u>从上往下找</u></p>
<p>​                =&gt;  那就肯定是递归找</p>
<p>​                                先判断当前节点是不是</p>
<p>​                                再判断当前节点的左子树中</p>
<p>​                                再判断当前节点的右子树中</p>
<p>​        <u>从下往上找</u></p>
<p>​                =&gt; 那题目中一定给了非常明现的提示，即：向上的指针，也就是指向父节点的指针。</p>
<p>那现在妥了，舒舒服服的窝在懒人沙发里，来，我们就看二叉树能给我们什么条件了。</p>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><p>二叉搜索树给我们的条件就是：</p>
<p>​        任意一个节点的<strong>左子树的所有节点</strong>值都比该节点的值小，</p>
<p>​                               其<strong>右子树的所有节点</strong>值都比该节点的值大。</p>
<p>那么好了，现在我们整理一下已知条件：</p>
<p>​        root的值、a的值、b的值、树结构中各个部分的大小关系。</p>
<p>OK，既然一直条件就在【值、大小关系】上，那我来看看他们三个的大小关系吧，我们就根据这个大小关系走：</p>
<p><em>没有向上的指针，所以我就从上往下找。</em></p>
<p><strong>任何一个节点node和a和b的关系一定是：</strong></p>
<p>(我好想画图，，但是不知道为啥图总传不上来，，就先这么着，以后补吧，，)</p>
<p>① node = a || node = b    </p>
<p>​                如果在node上面部分的树，都没有找到【公共祖先】，那他就是要找的【公共祖先】</p>
<p>​                这种情况下a和b一定是在一个枝儿上，也就是：a -&gt; … -&gt; b 或者 b -&gt; … -&gt; a</p>
<p>② a和b的值都小于node</p>
<p>​                那么，a和b的最近【公共祖先】节点一定在node的左边</p>
<p>​                需要继续寻找</p>
<p>​                                                    node</p>
<p>​                                a</p>
<p>​                                            b</p>
<p>③ a和b的值都大于node</p>
<p>​                那么，a和b的最近【公共祖先】节点一定在node的右边</p>
<p>​                需要继续寻找</p>
<p>​                                                    node</p>
<p>​                                                                            a</p>
<p>​                                                                    b</p>
<p>④ a和b的值，一个大于node，一个小于node</p>
<p>​                那么，node就是我们要找的【公共祖先】</p>
<p>​                这种情况下，一定是：a &lt;-  … &lt;-  targetNode - &gt; …  -&gt; b        //a和b在公共祖先节点的一左一右</p>
<p>​                                                    node</p>
<p>​                                        a</p>
<p>​                                                                    b</p>
<p>基于我们从上往下找的规则：先判断当前节点，再找判断左子节点，再判断右子节点，</p>
<h3 id="我们可以得出如下思路："><a href="#我们可以得出如下思路：" class="headerlink" title="我们可以得出如下思路："></a><strong>我们可以得出如下思路：</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从root往下找，对于任何一个节点node</span><br><span class="line"></span><br><span class="line">findNode:</span><br><span class="line"></span><br><span class="line">​		<span class="keyword">if</span>(node == a || node == b)</span><br><span class="line"></span><br><span class="line">​				<span class="keyword">return</span> node;                    找到√</span><br><span class="line"></span><br><span class="line">​		<span class="keyword">if</span>(node.val &lt; a.val  &amp;&amp; node.val &gt; b.val 或者 node.val &gt; a.val  &amp;&amp;  node.val &lt; b.val)</span><br><span class="line"></span><br><span class="line">​				<span class="keyword">return</span> node;                   a和b在node的一左一右，就是它，找到√</span><br><span class="line"></span><br><span class="line">​		<span class="keyword">if</span>(node.val  &lt;  a.val  &amp;&amp;  node.val &lt; b.val)</span><br><span class="line"></span><br><span class="line">​				那要找的点肯定是node的右子树上，递归操作`findNode(node.right)`</span><br><span class="line"></span><br><span class="line">​		<span class="keyword">if</span>(node.val &gt; a.val &amp;&amp; node.val &gt; b.val)</span><br><span class="line"></span><br><span class="line">​				那要找的点肯定是node的左子树上，递归操作 `findNode(node.left)`</span><br></pre></td></tr></table></figure>



<p>就完事儿了，让他自己往下找就行了。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code:"></a>code:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Node结构，右左子节点，右子节点，和自己的值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">findNode</span><span class="params">(Node root, Node a, Node b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || a == <span class="keyword">null</span> || b == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> find(root, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">find</span><span class="params">(Node node, Node a, Node b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == a || node == b)&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((node.val &lt; a.val &amp;&amp; node.val &gt; b.val) || (node.val &gt; a.val &amp;&amp; node.val &lt; b.val))&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; a.val &amp;&amp; node.val &lt; b.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> find(node.right, a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if(node.val &gt; a.val &amp;&amp; node.val &gt; b.val)</span></span><br><span class="line">            <span class="keyword">return</span> find(node.left, a, b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="普通二叉树-指向父节点指针"><a href="#普通二叉树-指向父节点指针" class="headerlink" title="普通二叉树 + 指向父节点指针"></a>普通二叉树 + 指向父节点指针</h2><p>那既然都说有指向父节点指针了，题目都提示到这个份儿上了，就是从下往上找呀。</p>
<h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>第一种想法肯定就是，最基础的，两边遍历呗。</p>
<p>for(each a.parent)</p>
<p>​        for(each b.parent)</p>
<p>​                if (a.parent == b.parent)</p>
<p>​                            yeah! 找到啦~~</p>
<p>语言讲就是，找a的父节点，与b的父节点、b的父父、b的父父父 … 比</p>
<p>​                           a的父父，与b的父节点、b的父父、b的父父父 … 比</p>
<p>​                          a的父父父，与b的父节点、b的父父、b的父父父 … 比</p>
<p>…</p>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node2&#123;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line">    Node2 parent;</span><br><span class="line">    int val;</span><br><span class="line"></span><br><span class="line">    public Node2(int val)&#123;</span><br><span class="line">        this.val &#x3D; val;</span><br><span class="line">        this.left &#x3D; null;</span><br><span class="line">        this.right &#x3D; null;</span><br><span class="line">        this.parent &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution4&#123;</span><br><span class="line">    public Node2 findNode2(Node2 root, Node2 a, Node2 b)&#123;</span><br><span class="line">        </span><br><span class="line">        Node2 nodea &#x3D; a;</span><br><span class="line">        Node2 nodeb &#x3D; b;</span><br><span class="line">        while(nodea !&#x3D; root)&#123;</span><br><span class="line">            </span><br><span class="line">            while(nodeb !&#x3D; root)&#123;</span><br><span class="line">                if(nodea &#x3D;&#x3D; nodeb)&#123;</span><br><span class="line">                    return nodea;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                nodeb &#x3D; nodeb.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            nodea &#x3D; nodea.parent;</span><br><span class="line">            nodeb &#x3D; b;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>方法2就具备一定的通用性，通到啥呢，通到【链表交点】</p>
<p>你看这个：a和b分别从下往上，按照指针，一路找过去，找到相交的点</p>
<p>​            和：链表节点a和b，按照链表方向，一路找过去，找到分叉的相交点</p>
<p>这是不是一模一样！！！！！！！（是。。。）</p>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>a到node 这条路径长度lengtha</p>
<p>b到node这条路径长度lengthb</p>
<p>要是把长的那条，的多出来的尾巴截掉，然后剩下的部分就，你走一步我走一步，携手并进，直到相遇，一起返回，多么美好的故事~~</p>
<p>a    x    x || x    x    x    x</p>
<p>​                    (i)                            node    z    z    z    z    root</p>
<p>​                    b    x    x    x</p>
<p>​                    (j)</p>
<p>在||的地方咔嚓剪掉，i , j 一同，携手并进，你走一步我也走一步，总有一天，i == j</p>
<h4 id="code-2"><a href="#code-2" class="headerlink" title="code:"></a>code:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node2</span></span>&#123;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line">    Node2 parent;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node2</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution5</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node2 <span class="title">findNode2</span><span class="params">(Node2 root, Node2 a, Node2 b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lengtha = calLength(root, a);</span><br><span class="line">        <span class="keyword">int</span> lengthb = calLength(root, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lengtha == lengthb)&#123;</span><br><span class="line">            <span class="keyword">return</span> find(a, b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lengtha &lt; lengthb)&#123;</span><br><span class="line">            <span class="keyword">int</span> diff = lengthb - lengtha;</span><br><span class="line">            moveNode(a, diff);</span><br><span class="line">            <span class="keyword">return</span> find(a, b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> diff = lengtha - lengthb;</span><br><span class="line">            moveNode(b, diff);</span><br><span class="line">            <span class="keyword">return</span> find(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveNode</span><span class="params">(Node2 a, <span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; step; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">                a = a.parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node2 <span class="title">find</span><span class="params">(Node2 a, Node2 b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a != b &amp;&amp; a.parent != <span class="keyword">null</span> &amp;&amp;  b.parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">            a = a.parent;</span><br><span class="line">            b = b.parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a == b ? a : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calLength</span><span class="params">(Node2 root, Node2 node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != root)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            node = node.parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="普通二叉树，没了"><a href="#普通二叉树，没了" class="headerlink" title="普通二叉树，没了"></a>普通二叉树，没了</h2><p>这就十分尴尬了，，，这算是个啥条件，，，？！</p>
<p>要值没有值，要父节点指针没有父节点指针。。。</p>
<h3 id="方法1：-1"><a href="#方法1：-1" class="headerlink" title="方法1："></a>方法1：</h3><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>从根节点向下找，找到通往a的路径，记在数组nodeArra中</p>
<p>​                               找到通往b的路径，记在数组nodeArrb中</p>
<p>然后双指针分别指向两个不同数组，从头到尾遍历两个数组，第一个不相同的node，的前一个元素，就是我们要找的。</p>
<p>root    x    y    z    a</p>
<p>root    x    y    b</p>
<p>那么y就是我们要找的。</p>
<p>可以想一下，对于a和b在一个枝儿上也是一样的</p>
<p>root    x    y    z    a</p>
<p>root    x    y    z    a    o    b</p>
<p>那么z就是我们要找的。</p>
<h4 id="code-3"><a href="#code-3" class="headerlink" title="code:"></a>code:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node3</span></span>&#123;</span><br><span class="line">    Node3 left;</span><br><span class="line">    Node3 right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution6</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node3 <span class="title">findNode</span><span class="params">(Node3 root, Node3 a, Node3 b)</span></span>&#123;</span><br><span class="line">        List&lt;Node3&gt; patha = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Node3&gt; pathb = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        List&lt;Node3&gt; tempa = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tempa.add(root);</span><br><span class="line">        List&lt;Node3&gt; tempb = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tempb.add(root);</span><br><span class="line">        </span><br><span class="line">        dfs(root, tempa, patha, a);</span><br><span class="line">        dfs(root, tempb, pathb, b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; patha.size() &amp;&amp; i &lt; pathb.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(patha.get(i) != pathb.get(i))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> patha.get(i - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node3 node, List&lt;Node3&gt; temp, List&lt;Node3&gt; path, Node3 target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == target)&#123;</span><br><span class="line">            path = <span class="keyword">new</span> ArrayList&lt;&gt;(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp.add(node.left);</span><br><span class="line">            dfs(node.left, temp, path, target);</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp.add(node.right);</span><br><span class="line">            dfs(node.right, temp, path, target);</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方法2：-1"><a href="#方法2：-1" class="headerlink" title="方法2："></a>方法2：</h3><h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><p>还是延续之前树的思想</p>
<p>从上往下走</p>
<p>如果node == a，且b在node的左/右子树中</p>
<p>​    return node</p>
<p>如果a和b在node的两边子树，一边一个</p>
<p>​    return node</p>
<p>如果，a和b都在node的左子树中</p>
<p>​    迭代（node.left）</p>
<p>如果，a和b都在node的右子树中</p>
<p>​    迭代（node.right)</p>
<p>那么我们需要考虑的就是，如何判断a 在不在 node的左子树 （或以此类推其他的），反正就是在不在子树中：</p>
<p>if node == a        true</p>
<p>else return 迭代（node.left） || 迭代（node.right）</p>
<p>其实就是用了两次【树的基本操作】，好像也没什么大不了嘛~</p>
<h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node3</span></span>&#123;</span><br><span class="line">    Node3 left;</span><br><span class="line">    Node3 right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node3 <span class="title">findNode</span><span class="params">(Node3 root, Node3 a, Node3 b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((root == a &amp;&amp; isInTree(root, b)) || (root == b &amp;&amp; isInTree(root, a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((isInTree(root.left, a) &amp;&amp; isInTree(root.right, b)) || (isInTree(root.left, b) &amp;&amp; isInTree(root.right, a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isInTree(root.left, a) &amp;&amp; isInTree(root.left, b))&#123;</span><br><span class="line">            <span class="keyword">return</span> findNode(root.left, a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isInTree(root.right, a) &amp;&amp; isInTree(root.right, b))&#123;</span><br><span class="line">            <span class="keyword">return</span> findNode(root.right, a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInTree</span><span class="params">(Node3 root, Node3 target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || target == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isInTree(root.left, target) || isInTree(root.right, target);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>完结撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>
<p>HAVE A NICE DAY~</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode 797. 所有可能的路径</title>
    <url>/2020/08/05/Leetcode%20797.%20%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="Leetcode-797-所有可能的路径"><a href="#Leetcode-797-所有可能的路径" class="headerlink" title="Leetcode 797. 所有可能的路径"></a>Leetcode 797. 所有可能的路径</h1><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给一个有 n 个结点的有向无环图，找到所有从 0 到 n-1 的路径并输出（不要求按顺序）</p>
<p>二维数组的第 i 个数组中的单元都表示有向图中 i 号结点所能到达的下一些结点（译者注：有向图是有方向的，即规定了a→b你就不能从b→a）空就是没有下一个结点了。</p>
<p><strong>示例:</strong><br>输入: [[1,2], [3], [3], []]<br>输出: [[0,1,3],[0,2,3]] </p>
<p><em>解释:</em> 图是这样的:<br>0—&gt;1<br>|    |<br>v    v<br>2—&gt;3<br>这有两条路: <code>0 -&gt; 1 -&gt; 3</code> 和 <code>0 -&gt; 2 -&gt; 3</code>.</p>
<p><strong>提示:</strong></p>
<ul>
<li>结点的数量会在范围 <code>[2, 15]</code> 内。</li>
<li>你可以把路径以任意顺序输出，但在路径内的结点的顺序必须保证。</li>
</ul>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="题目的意思"><a href="#题目的意思" class="headerlink" title="题目的意思"></a>题目的意思</h3><p>这个题大概一看就能知道它要干啥，但是吧，我就是因为这么<strong>大概一看</strong>，这个人都陷入了一顺儿水儿的令人·卧槽· 的bug中去了…</p>
<p>这个图：</p>
<ol>
<li><p>起点必须是 0</p>
</li>
<li><p>终点必须是graph数组的最后一个元素， 注意！</p>
<p>​    例如说：<code>input:[[2],[],[1]]</code>，最后组成的图，要走的路径是 <code>0 -&gt; 1</code> 而不是<code>0 -&gt; 中间那个null</code></p>
</li>
<li><p>再有就是，记录的是路径，也就是说，带开头的 0 ，不带终点的元素。</p>
<p>​    还是上面那个例子：<code>input:[[2],[],[1]]</code>，最后的结果是 <code>[0,2]</code>而不是<code>[0,2,1]</code>，不带那个1，也不用考虑1所在的那个数组格子里面有没有成堆的元素需要遍历。</p>
</li>
</ol>
<p>我为什么知道这么多呢，大概是因为命运和不好好看题的懒惰🙂</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>打眼一看就是个DFS深度搜索。</p>
<h3 id="code-（java）"><a href="#code-（java）" class="headerlink" title="code （java）"></a>code （java）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="keyword">int</span>[][] graph) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check input</span></span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span> || graph[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        temp.add(<span class="number">0</span>);    <span class="comment">//注意1:路径的开头总是 0</span></span><br><span class="line">        dfs(graph, <span class="number">0</span>, temp, result);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> curr, List&lt;Integer&gt; temp, List&lt;List&lt;Integer&gt;&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//注意3：确认好corner case下input 与 output， 他这里吧，如果goal位置有元素，是不需要记录goal在路径中的。</span></span><br><span class="line">        <span class="keyword">if</span>(curr == graph.length - <span class="number">1</span> &amp;&amp; !temp.isEmpty())&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//注意2:必须new ArrayList&lt;&gt;(); 不然之后temp list改变，result中的值会跟着改变，（java特性）</span></span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));      </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph[curr].length; i++)&#123;</span><br><span class="line">            temp.add(graph[curr][i]);		<span class="comment">//填一个进去路径中</span></span><br><span class="line">            dfs(graph, graph[curr][i], temp, result);	<span class="comment">//在此路径基础上，dfs</span></span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);		<span class="comment">//回退一位路径。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>走一个test：</p>
<p>输入: [[1,2], [3], [3], []]<br>输出: [[0,1,3],[0,2,3]] </p>
<p>图是这样的:<br>0—&gt;1<br>|    |<br>v    v<br>2—&gt;3<br>结果应该是有两条路: <code>0 -&gt; 1 -&gt; 3</code> 和 <code>0 -&gt; 2 -&gt; 3</code>.</p>
<p><code>[[1,2], [3], [3], []]</code> </p>
<p>temp记录到这一步为止，走过的路径。每次走到头，就将temp路径计入result，然后回退。所以这玩意儿又叫backtrack方法。</p>
<p>temp list：0        //上面说过了，路径开头肯定是 0 </p>
<p>走第0个数组[1, 2]:</p>
<p>​        先试着走1 ：</p>
<p>​                temp : 0, 1</p>
<p>​                进到数组 [3]</p>
<p>​                        temp : 0, 1, 3</p>
<p>​                        进到goal终点数组 [ ]</p>
<p>​                        结束，将形成的temp路线放入result中 ——————-  0 -&gt; 1 -&gt; 3</p>
<p>​                退回数组[3]</p>
<p>​                        temp : 0, 1</p>
<p>​                        没有其他路径了</p>
<p>​    退回数组[1, 2] :</p>
<p>​            temp : 0</p>
<p>​            试着走2：</p>
<p>​                        temp : 0, 2</p>
<p>​                        进到数组 [ 3 ]</p>
<p>​                                temp : [0, 2, 3]</p>
<p>​                                进到goal终点数组 [ ]</p>
<p>​                        结束，将形成的temp路线放入result中———————-0 -&gt; 2 -&gt; 3</p>
<p>​                退回数组[3]</p>
<p>​                        temp : 0, 2</p>
<p>​                        没有其他路径了</p>
<p>​    退回数组[1, 2] :</p>
<p>​            temp : 0</p>
<p>​            没有其他路径了</p>
<p>结束。</p>
<p>​            </p>
<blockquote>
<p>这个题的代码，基本就是DFS深度搜索的框架了，可以参考着记一下。        </p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2020/07/24/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="一、对进程的理解"><a href="#一、对进程的理解" class="headerlink" title="一、对进程的理解"></a>一、对进程的理解</h2><h3 id="（一）从哪里来："><a href="#（一）从哪里来：" class="headerlink" title="（一）从哪里来："></a>（一）从哪里来：</h3><p>​            一个程序被运行，其代码从磁盘中到内存中，就开启了一个进程。</p>
<h4 id="程序和进程的关系可以理解为："><a href="#程序和进程的关系可以理解为：" class="headerlink" title="* 程序和进程的关系可以理解为："></a>* 程序和进程的关系可以理解为：</h4><p>​                        可以把进程当作程序的一个实例。</p>
<p>​                        ① 一个程序可以有很多个实例进程（大部分程序）</p>
<p>​                                    比如：word，记事本， 浏览器，etc.，每次开启这个程序，就会出现一个新的实例进程。</p>
<p>​                        ② 一个程序也可能只有一个实例进程</p>
<p>​                                    比如：网易云音乐，360安全卫士等，这些程序启动一个再启动一个，也不会出现第二个进程。</p>
<h3 id="（二）作用："><a href="#（二）作用：" class="headerlink" title="（二）作用："></a>（二）作用：</h3><p>​            加载指令、管理内存、管理IO。</p>
<h3 id="（三）是最小的资源分配单位。"><a href="#（三）是最小的资源分配单位。" class="headerlink" title="（三）是最小的资源分配单位。"></a>（三）是最小的资源分配单位。</h3><h3 id="（四）跟线程的关系"><a href="#（四）跟线程的关系" class="headerlink" title="（四）跟线程的关系"></a>（四）跟线程的关系</h3><p>​            进程是线程的容器。线程存在于进程内，是进程的一个子集。</p>
<h3 id="（五）特点："><a href="#（五）特点：" class="headerlink" title="（五）特点："></a>（五）特点：</h3><ol>
<li><p>​    基本上相互独立</p>
</li>
<li><p>​    拥有共享资源</p>
<p>​        如：内存空间</p>
<p>​                供进程内的线程使用。</p>
</li>
<li><p>量级：</p>
<p>​        进程量级比线程高一些，上下文切换成本较线程高。</p>
<p>​        </p>
</li>
</ol>
<h3 id="（六）进程间通信："><a href="#（六）进程间通信：" class="headerlink" title="（六）进程间通信："></a>（六）进程间通信：</h3><p>​            较为复杂。</p>
<h4 id="1-同一台机器上"><a href="#1-同一台机器上" class="headerlink" title="1. 同一台机器上"></a>1. 同一台机器上</h4><p>​                        IPC（Inter-process communication）</p>
<h4 id="2-不同机器上"><a href="#2-不同机器上" class="headerlink" title="2. 不同机器上"></a>2. 不同机器上</h4><p>​                        需要通过网络，并遵守共同协议，如：HTTP协议。</p>
<h2 id="二、对线程的理解"><a href="#二、对线程的理解" class="headerlink" title="二、对线程的理解"></a>二、对线程的理解</h2><h3 id="（一）从哪里来：-1"><a href="#（一）从哪里来：-1" class="headerlink" title="（一）从哪里来："></a>（一）从哪里来：</h3><p>​            一个进程可以分为一个到多个线程</p>
<h3 id="（二）线程本质上到底是什么"><a href="#（二）线程本质上到底是什么" class="headerlink" title="（二）线程本质上到底是什么"></a>（二）线程本质上到底是什么</h3><p>​            线程是一个指令流。</p>
<h3 id="（三）作用："><a href="#（三）作用：" class="headerlink" title="（三）作用："></a>（三）作用：</h3><p>​            一个线程，将指令流中的一条条指令，<strong><u>以一定顺序</u></strong>，交给CPU执行。</p>
<p>​            即：线程是用来执行指令的。</p>
<h3 id="（四）是最小的调度单位"><a href="#（四）是最小的调度单位" class="headerlink" title="（四）是最小的调度单位"></a>（四）是最小的调度单位</h3><h3 id="（五）跟进程的关系："><a href="#（五）跟进程的关系：" class="headerlink" title="（五）跟进程的关系："></a>（五）跟进程的关系：</h3><p>​            进程是线程的容器。线程存在于进程内，是进程的一个子集。</p>
<h3 id="（六）线程间通信："><a href="#（六）线程间通信：" class="headerlink" title="（六）线程间通信："></a>（六）线程间通信：</h3><p>​            相对简单。</p>
<p>​            共享同一个进程中的内存资源。</p>
<p>​                        如：多个线程可以访问同一个共享变量。</p>
<h3 id="（七）特点"><a href="#（七）特点" class="headerlink" title="（七）特点"></a>（七）特点</h3><ol>
<li><p>量级：</p>
<p>​        相对轻量级，上下文切换成本较低。</p>
</li>
</ol>
<h2 id="三、程序、进程、线程的关系图解"><a href="#三、程序、进程、线程的关系图解" class="headerlink" title="三、程序、进程、线程的关系图解"></a>三、程序、进程、线程的关系图解</h2><img src="/2020/07/24/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/Typora 笔记\java并发 复习\pic\程序、进程、线程.PNG" style="zoom: 33%;">

<p><code>注意</code></p>
<ol>
<li><p><code>每开启一个程序，就有了一个进程。</code></p>
<p>​    <code>有些程序可以多次开启，所以可以有多个进程，比如开启多个word</code></p>
<p>​    <code>有些程序只能开启一次，重复开启不会拥有新的进程，比如网易云音乐</code></p>
</li>
</ol>
<p>[^以上内容均为个人理解，若有问题，欢迎指正交流~~  <a href="mailto:xiaoyingblog@163.com">xiaoyingblog@163.com</a> ^_^]: </p>
<p>​        </p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2020/03/31/My-New-Post/</url>
    <content><![CDATA[<p>This is a test file. Hope my blog runs perfectly. ^-^</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
